<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mit6.s081_Lab_Utilities</title>
    <url>/2024/04/09/Mit6-s081-Lab-Utilities/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客搭建记录</title>
    <url>/2023/11/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h3 id="参考教程：从零开始搭建个人博客"><a href="#参考教程：从零开始搭建个人博客" class="headerlink" title="参考教程：从零开始搭建个人博客"></a>参考教程：<a href="https://zhuanlan.zhihu.com/p/102592286">从零开始搭建个人博客</a></h3>]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Mit6.S081准备工作及Debug方法</title>
    <url>/2024/03/30/Mit6-s081/</url>
    <content><![CDATA[<p>​	在找日常实习时，由于只做了WebServer这一个项目，被告知项目太少，于是决定好好做点lab，丰富自己的简历。所以选择学习MIT 6.S081的内容，希望做完能<del>找到实习</del>有所收获。</p>
<span id="more"></span>

<blockquote>
<p><a href="https://greatpi.github.io/2024/04/09/Mit6-s081-Lab-Utilities/">Lab Utilities</a></p>
</blockquote>
<p>​	课程官网：<a href="https://pdos.csail.mit.edu/6.S081/2021/">6.S081：Operating System Engineering</a></p>
<p>​	官方教材及课程安排可以在课程官网中下载及查看。</p>
<img src="/2024/03/30/Mit6-s081/schedule.jpg" class title="example">

<p>​	按照该课程进行学习及做相应的任务（lab）。</p>
<p>​	个人觉得阅读文章更快，在学习时选择阅读这位博主的翻译（感谢大佬），<a href="https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081">翻译</a>。</p>
<p>​	当然，遇到一些实际操作看不懂时也会选择查看视频验证，目前B站上已经上传了很多视频，可以搜索查看。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>​	在官网的教程指引中，根据自身情况进行下载。</p>
<img src="/2024/03/30/Mit6-s081/tools.jpg" class title="tools">

<p>​	我使用的是虚拟机下的Ubuntu。</p>
<p>​	接下来从github上将课程作业clone下来：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://g.csail.mit.edu/xv6-labs-2021</span><br></pre></td></tr></table></figure>

<p>​	然后每个lab有对应的分支，我们切换到其对应的分支即可（以第一个lab为例）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> xv6-labs-2021</span><br><span class="line">git checkout util</span><br></pre></td></tr></table></figure>

<h2 id="Debug方法（gdb调试）"><a href="#Debug方法（gdb调试）" class="headerlink" title="Debug方法（gdb调试）"></a>Debug方法（gdb调试）</h2><ul>
<li>在终端中输入如下命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make qemu-gdb</span><br></pre></td></tr></table></figure>

<p>出现如下提示：</p>
<img src="/2024/03/30/Mit6-s081/image-20240409211817702.png" class title="image-20240409211817702">

<ul>
<li>在<strong>另一终端</strong>中输入如下命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-multiarch</span><br></pre></td></tr></table></figure>

<ul>
<li>在<strong>gdb</strong>中对qemu-gdb进行连接</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">target remote localhost:25000</span><br></pre></td></tr></table></figure>

<p>注意此处的端口号为第一步所出现的</p>
<p>出现如下提示：</p>
<img src="/2024/03/30/Mit6-s081/image-20240409212423782.png" class title="image-20240409212423782">

<ul>
<li>选择可执行文件进行调试（以内核为例）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file kernel/kernel</span><br></pre></td></tr></table></figure>

<img src="/2024/03/30/Mit6-s081/image-20240409212634158.png" class title="image-20240409212634158">

<p>后续就可以进行正常的gdb操作了</p>
]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Mit6.s081-Lab-Page-table</title>
    <url>/2024/04/10/Mit6-s081-Lab-Page-table/</url>
    <content><![CDATA[<p>先梳理一下本节课相关的代码。</p>
<span id="more"></span>

<p>在kernel&#x2F;main.c中，此时还处于内核态中。</p>
<ul>
<li>调用kinit对物理内存按页进行划分，并存放在链表中。后续可通过kalloc和kfree获取或释放链表中的物理内存。</li>
<li>调用kvminit生成内核页表。调用kalloc获取内核页表，并将内核虚拟地址与物理地址进行映射。</li>
<li>调用kvminithart将内核页表载入satp寄存器（用于存放页表地址）中。由于内核虚拟地址与物理地址完全一致，故此时经过页表‘翻译’的虚拟地址还是与实际物理地址相同，这也是后续指令能够正确执行的原因。</li>
<li>walk函数模拟了MMU（内存管理单元）的功能。</li>
</ul>
<h2 id="Speed-up-system-calls"><a href="#Speed-up-system-calls" class="headerlink" title="Speed up system calls"></a>Speed up system calls</h2><p>​	对getpid这一系统调用进行加速。原理为<strong>通过将其提前存放在进程的虚拟地址空间中，使得在查询时不需要陷入内核</strong>，从而节省了系统调用的时间。所以，只有<strong>从进程产生后就不会发生改变的查询类系统调用</strong>能够使用该方法进行优化。</p>
<p>​	将USYSCALL进行映射并在该虚拟地址处存放struct usyscall。</p>
<p>​	ugetpid函数在用户空间（user&#x2F;ulib.c）中实现。</p>
<blockquote>
<p>提示：</p>
<ul>
<li>能够在kernel&#x2F;proc.c的proc_pagetable函数中实现映射</li>
<li>选择permission bits使得用户空间只读</li>
<li>mappages函数是一个有用的工具</li>
<li>不要忘记在allocproc函数中分配及初始化</li>
<li>确保在freeproc函数中释放了申请的页</li>
</ul>
</blockquote>
]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
